
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  24000010  080059d8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000110  080059d8  00020110  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013afd  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000223d  00000000  00000000  00033b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000fd0  00000000  00000000  00035dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c6b  00000000  00000000  00036d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000300db  00000000  00000000  000379fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134ee  00000000  00000000  00067ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013ed85  00000000  00000000  0007afc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004398  00000000  00000000  001b9d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  001be0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005968 	.word	0x08005968

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005968 	.word	0x08005968

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80005ec:	f000 fbfc 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f80a 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f92c 	bl	8000850 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f8d6 	bl	80007a8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80005fc:	f000 f920 	bl	8000840 <MX_USB_OTG_HS_USB_Init>
  MX_TIM3_Init();
 8000600:	f000 f878 	bl	80006f4 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
 8000604:	e7fe      	b.n	8000604 <main+0x1c>
	...

08000608 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b09c      	sub	sp, #112	; 0x70
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	224c      	movs	r2, #76	; 0x4c
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 f97a 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2220      	movs	r2, #32
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 f974 	bl	8005910 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemClock_Config+0xe4>)
 800062a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800062e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000632:	2004      	movs	r0, #4
 8000634:	f000 ff18 	bl	8001468 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <SystemClock_Config+0xe8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <SystemClock_Config+0xe8>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <SystemClock_Config+0xe8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000654:	bf00      	nop
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <SystemClock_Config+0xe8>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000662:	d1f8      	bne.n	8000656 <SystemClock_Config+0x4e>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 8000664:	2321      	movs	r3, #33	; 0x21
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
      RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800067e:	2318      	movs	r3, #24
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff3c 	bl	800151c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xa6>
    Error_Handler();
 80006aa:	f000 f9fd 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fb54 	bl	8001d80 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xda>
    Error_Handler();
 80006de:	f000 f9e3 	bl	8000aa8 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3770      	adds	r7, #112	; 0x70
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	58024400 	.word	0x58024400
 80006f0:	58024800 	.word	0x58024800

080006f4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2224      	movs	r2, #36	; 0x24
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 f904 	bl	8005910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000714:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_TIM3_Init+0xb0>)
 8000716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_TIM3_Init+0xac>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_TIM3_Init+0xac>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000738:	2303      	movs	r3, #3
 800073a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000750:	2301      	movs	r3, #1
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000764:	f003 fc78 	bl	8004058 <HAL_TIM_Encoder_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0x7e>
    Error_Handler();
 800076e:	f000 f99b 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000780:	f003 fe5e 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x9a>
    Error_Handler();
 800078a:	f000 f98d 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800078e:	213c      	movs	r1, #60	; 0x3c
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <MX_TIM3_Init+0xac>)
 8000792:	f003 fd07 	bl	80041a4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */
}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2400002c 	.word	0x2400002c
 80007a4:	40000400 	.word	0x40000400

080007a8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_USART3_UART_Init+0x94>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007f2:	f003 feb3 	bl	800455c <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 80007fc:	f000 f954 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 8000800:	2100      	movs	r1, #0
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000804:	f004 ffb9 	bl	800577a <HAL_UARTEx_SetTxFifoThreshold>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 800080e:	f000 f94b 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 8000812:	2100      	movs	r1, #0
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000816:	f004 ffee 	bl	80057f6 <HAL_UARTEx_SetRxFifoThreshold>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8000820:	f000 f942 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000826:	f004 ff6f 	bl	8005708 <HAL_UARTEx_DisableFifoMode>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 8000830:	f000 f93a 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000078 	.word	0x24000078
 800083c:	40004800 	.word	0x40004800

08000840 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b89      	ldr	r3, [pc, #548]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000868:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086c:	4a87      	ldr	r2, [pc, #540]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000876:	4b85      	ldr	r3, [pc, #532]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	623b      	str	r3, [r7, #32]
 8000882:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000884:	4b81      	ldr	r3, [pc, #516]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000886:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088a:	4a80      	ldr	r2, [pc, #512]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000894:	4b7d      	ldr	r3, [pc, #500]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b7a      	ldr	r3, [pc, #488]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a8:	4a78      	ldr	r2, [pc, #480]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b2:	4b76      	ldr	r3, [pc, #472]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c6:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d0:	4b6e      	ldr	r3, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b6b      	ldr	r3, [pc, #428]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e4:	4a69      	ldr	r2, [pc, #420]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ee:	4b67      	ldr	r3, [pc, #412]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fc:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <MX_GPIO_Init+0x23c>)
 80008fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000902:	4a62      	ldr	r2, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800090c:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800090e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	4b5c      	ldr	r3, [pc, #368]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800091c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000920:	4a5a      	ldr	r2, [pc, #360]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000926:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800092a:	4b58      	ldr	r3, [pc, #352]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800092c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000938:	4b54      	ldr	r3, [pc, #336]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800093a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093e:	4a53      	ldr	r2, [pc, #332]	; (8000a8c <MX_GPIO_Init+0x23c>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000948:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x23c>)
 800094a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	484c      	ldr	r0, [pc, #304]	; (8000a90 <MX_GPIO_Init+0x240>)
 800095e:	f000 fd69 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	484b      	ldr	r0, [pc, #300]	; (8000a94 <MX_GPIO_Init+0x244>)
 8000968:	f000 fd64 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | GPIO_PIN_6 | GPIO_PIN_7,
 800096c:	2200      	movs	r2, #0
 800096e:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000972:	4849      	ldr	r0, [pc, #292]	; (8000a98 <MX_GPIO_Init+0x248>)
 8000974:	f000 fd5e 	bl	8001434 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2102      	movs	r1, #2
 800097c:	4847      	ldr	r0, [pc, #284]	; (8000a9c <MX_GPIO_Init+0x24c>)
 800097e:	f000 fd59 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4842      	ldr	r0, [pc, #264]	; (8000aa0 <MX_GPIO_Init+0x250>)
 8000998:	f000 fb9c 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4836      	ldr	r0, [pc, #216]	; (8000a90 <MX_GPIO_Init+0x240>)
 80009b6:	f000 fb8d 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ba:	2320      	movs	r3, #32
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4830      	ldr	r0, [pc, #192]	; (8000a94 <MX_GPIO_Init+0x244>)
 80009d2:	f000 fb7f 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 80009d6:	f244 03c1 	movw	r3, #16577	; 0x40c1
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482a      	ldr	r0, [pc, #168]	; (8000a98 <MX_GPIO_Init+0x248>)
 80009f0:	f000 fb70 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <MX_GPIO_Init+0x254>)
 8000a0a:	f000 fb63 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_GPIO_Init+0x244>)
 8000a24:	f000 fb56 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_GPIO_Init+0x244>)
 8000a46:	f000 fb45 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 8000a4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_GPIO_Init+0x244>)
 8000a64:	f000 fb36 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x24c>)
 8000a80:	f000 fb28 	bl	80010d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	; 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	58021400 	.word	0x58021400
 8000a94:	58020000 	.word	0x58020000
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58021000 	.word	0x58021000
 8000aa0:	58020800 	.word	0x58020800
 8000aa4:	58021800 	.word	0x58021800

08000aa8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_MspInit+0x30>)
 8000abc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x30>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x30>)
 8000acc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12d      	bne.n	8000b66 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b46:	23c0      	movs	r3, #192	; 0xc0
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b56:	2302      	movs	r3, #2
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_TIM_Encoder_MspInit+0x90>)
 8000b62:	f000 fab7 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40000400 	.word	0x40000400
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020000 	.word	0x58020000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0ba      	sub	sp, #232	; 0xe8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 feb7 	bl	8005910 <memset>
  if(huart->Instance==USART3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <HAL_UART_MspInit+0xc8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d146      	bne.n	8000c3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bac:	f04f 0202 	mov.w	r2, #2
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 fc68 	bl	8002498 <HAL_RCCEx_PeriphCLKConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bce:	f7ff ff6b 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_UART_MspInit+0xcc>)
 8000bd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <HAL_UART_MspInit+0xcc>)
 8000bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bde:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0xcc>)
 8000be4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0xcc>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0xcc>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0xcc>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0xd0>)
 8000c36:	f000 fa4d 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37e8      	adds	r7, #232	; 0xe8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004800 	.word	0x40004800
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58020c00 	.word	0x58020c00

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f916 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <SystemInit+0xd0>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <SystemInit+0xd0>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <SystemInit+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d807      	bhi.n	8000cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <SystemInit+0xd4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 030f 	bic.w	r3, r3, #15
 8000ccc:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <SystemInit+0xd4>)
 8000cce:	f043 0303 	orr.w	r3, r3, #3
 8000cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemInit+0xd8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <SystemInit+0xd8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <SystemInit+0xd8>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <SystemInit+0xd8>)
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <SystemInit+0xdc>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <SystemInit+0xd4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <SystemInit+0xd4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <SystemInit+0xd4>)
 8000d08:	f043 0303 	orr.w	r3, r3, #3
 8000d0c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <SystemInit+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <SystemInit+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <SystemInit+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <SystemInit+0xd8>)
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <SystemInit+0xe0>)
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <SystemInit+0xd8>)
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <SystemInit+0xe4>)
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <SystemInit+0xd8>)
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <SystemInit+0xe8>)
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <SystemInit+0xd8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <SystemInit+0xd8>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <SystemInit+0xe8>)
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <SystemInit+0xd8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <SystemInit+0xd8>)
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <SystemInit+0xe8>)
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <SystemInit+0xd8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SystemInit+0xd8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <SystemInit+0xd8>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <SystemInit+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <SystemInit+0xec>)
 8000d64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	52002000 	.word	0x52002000
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d84:	02020200 	.word	0x02020200
 8000d88:	01ff0000 	.word	0x01ff0000
 8000d8c:	01010280 	.word	0x01010280
 8000d90:	52004000 	.word	0x52004000

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff ff84 	bl	8000ca4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f004 fdad 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc0f 	bl	80005e8 <main>
  bx  lr
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dd8:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8000ddc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000de0:	24000110 	.word	0x24000110

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f93e 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000df4:	f001 f97a 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f814 	bl	8000e60 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fe37 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	08005980 	.word	0x08005980
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e021      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_InitTick+0x64>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f915 	bl	80010ba <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f000 f8ed 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x68>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2400000c 	.word	0x2400000c
 8000ec4:	24000000 	.word	0x24000000
 8000ec8:	24000008 	.word	0x24000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2400000c 	.word	0x2400000c
 8000ef0:	2400010c 	.word	0x2400010c

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2400010c 	.word	0x2400010c

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	05fa0000 	.word	0x05fa0000

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff47 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff5e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffb2 	bl	800102c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010e2:	4b89      	ldr	r3, [pc, #548]	; (8001308 <HAL_GPIO_Init+0x234>)
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010e6:	e194      	b.n	8001412 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8186 	beq.w	800140c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x44>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 0201 	and.w	r2, r3, #1
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b03      	cmp	r3, #3
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d123      	bne.n	800120a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	69b9      	ldr	r1, [r7, #24]
 8001206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0203 	and.w	r2, r3, #3
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80e0 	beq.w	800140c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_GPIO_Init+0x238>)
 800124e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001252:	4a2e      	ldr	r2, [pc, #184]	; (800130c <HAL_GPIO_Init+0x238>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_GPIO_Init+0x238>)
 800125e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_GPIO_Init+0x23c>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a20      	ldr	r2, [pc, #128]	; (8001314 <HAL_GPIO_Init+0x240>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d052      	beq.n	800133c <HAL_GPIO_Init+0x268>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_GPIO_Init+0x244>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d031      	beq.n	8001302 <HAL_GPIO_Init+0x22e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_GPIO_Init+0x248>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d02b      	beq.n	80012fe <HAL_GPIO_Init+0x22a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_GPIO_Init+0x24c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d025      	beq.n	80012fa <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_GPIO_Init+0x250>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d01f      	beq.n	80012f6 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <HAL_GPIO_Init+0x254>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d019      	beq.n	80012f2 <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_GPIO_Init+0x258>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_GPIO_Init+0x25c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x260>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_GPIO_Init+0x264>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x20e>
 80012de:	2309      	movs	r3, #9
 80012e0:	e02d      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012e2:	230a      	movs	r3, #10
 80012e4:	e02b      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012e6:	2308      	movs	r3, #8
 80012e8:	e029      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e027      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e025      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e023      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e021      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e01f      	b.n	800133e <HAL_GPIO_Init+0x26a>
 80012fe:	2302      	movs	r3, #2
 8001300:	e01d      	b.n	800133e <HAL_GPIO_Init+0x26a>
 8001302:	2301      	movs	r3, #1
 8001304:	e01b      	b.n	800133e <HAL_GPIO_Init+0x26a>
 8001306:	bf00      	nop
 8001308:	58000080 	.word	0x58000080
 800130c:	58024400 	.word	0x58024400
 8001310:	58000400 	.word	0x58000400
 8001314:	58020000 	.word	0x58020000
 8001318:	58020400 	.word	0x58020400
 800131c:	58020800 	.word	0x58020800
 8001320:	58020c00 	.word	0x58020c00
 8001324:	58021000 	.word	0x58021000
 8001328:	58021400 	.word	0x58021400
 800132c:	58021800 	.word	0x58021800
 8001330:	58021c00 	.word	0x58021c00
 8001334:	58022000 	.word	0x58022000
 8001338:	58022400 	.word	0x58022400
 800133c:	2300      	movs	r3, #0
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	f002 0203 	and.w	r2, r2, #3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4093      	lsls	r3, r2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134e:	4938      	ldr	r1, [pc, #224]	; (8001430 <HAL_GPIO_Init+0x35c>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3301      	adds	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f ae63 	bne.w	80010e8 <HAL_GPIO_Init+0x14>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3724      	adds	r7, #36	; 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	58000400 	.word	0x58000400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	2b06      	cmp	r3, #6
 800147a:	d00a      	beq.n	8001492 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e040      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e03e      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800149a:	491f      	ldr	r1, [pc, #124]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014a2:	f7ff fd27 	bl	8000ef4 <HAL_GetTick>
 80014a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014a8:	e009      	b.n	80014be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014aa:	f7ff fd23 	bl	8000ef4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b8:	d901      	bls.n	80014be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e028      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ca:	d1ee      	bne.n	80014aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b1e      	cmp	r3, #30
 80014d0:	d008      	beq.n	80014e4 <HAL_PWREx_ConfigSupply+0x7c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b2e      	cmp	r3, #46	; 0x2e
 80014d6:	d005      	beq.n	80014e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b1d      	cmp	r3, #29
 80014dc:	d002      	beq.n	80014e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b2d      	cmp	r3, #45	; 0x2d
 80014e2:	d114      	bne.n	800150e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014e4:	f7ff fd06 	bl	8000ef4 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014ea:	e009      	b.n	8001500 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ec:	f7ff fd02 	bl	8000ef4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fa:	d901      	bls.n	8001500 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e007      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d1ee      	bne.n	80014ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024800 	.word	0x58024800

0800151c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f000 bc1f 	b.w	8001d6e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80b3 	beq.w	80016a4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4b95      	ldr	r3, [pc, #596]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001548:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	2b10      	cmp	r3, #16
 8001552:	d007      	beq.n	8001564 <HAL_RCC_OscConfig+0x48>
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	2b18      	cmp	r3, #24
 8001558:	d112      	bne.n	8001580 <HAL_RCC_OscConfig+0x64>
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d10d      	bne.n	8001580 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8098 	beq.w	80016a2 <HAL_RCC_OscConfig+0x186>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 8093 	bne.w	80016a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e3f6      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x7c>
 800158a:	4b82      	ldr	r3, [pc, #520]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a81      	ldr	r2, [pc, #516]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e058      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d112      	bne.n	80015c6 <HAL_RCC_OscConfig+0xaa>
 80015a0:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a7b      	ldr	r2, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b79      	ldr	r3, [pc, #484]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a78      	ldr	r2, [pc, #480]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b76      	ldr	r3, [pc, #472]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a75      	ldr	r2, [pc, #468]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e041      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0xda>
 80015d0:	4b70      	ldr	r3, [pc, #448]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a6f      	ldr	r2, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6c      	ldr	r2, [pc, #432]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e029      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80015fe:	d112      	bne.n	8001626 <HAL_RCC_OscConfig+0x10a>
 8001600:	4b64      	ldr	r3, [pc, #400]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a63      	ldr	r2, [pc, #396]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b61      	ldr	r3, [pc, #388]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a60      	ldr	r2, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a5d      	ldr	r2, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e011      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a57      	ldr	r2, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b55      	ldr	r3, [pc, #340]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a54      	ldr	r2, [pc, #336]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001644:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001648:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d013      	beq.n	800167a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fc4f 	bl	8000ef4 <HAL_GetTick>
 8001656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fc4b 	bl	8000ef4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e380      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x13e>
 8001678:	e014      	b.n	80016a4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fc3b 	bl	8000ef4 <HAL_GetTick>
 800167e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff fc37 	bl	8000ef4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	; 0x64
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e36c      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x166>
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 808c 	beq.w	80017ca <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1bc>
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	2b18      	cmp	r3, #24
 80016cc:	d137      	bne.n	800173e <HAL_RCC_OscConfig+0x222>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d132      	bne.n	800173e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1d4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e33e      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 0219 	bic.w	r2, r3, #25
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4925      	ldr	r1, [pc, #148]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fbf7 	bl	8000ef4 <HAL_GetTick>
 8001706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fbf3 	bl	8000ef4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e328      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	4917      	ldr	r1, [pc, #92]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 0219 	bic.w	r2, r3, #25
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4910      	ldr	r1, [pc, #64]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fbcc 	bl	8000ef4 <HAL_GetTick>
 800175c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fbc8 	bl	8000ef4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e2fd      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	061b      	lsls	r3, r3, #24
 800178c:	4901      	ldr	r1, [pc, #4]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
 8001792:	e01a      	b.n	80017ca <HAL_RCC_OscConfig+0x2ae>
 8001794:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001798:	4b97      	ldr	r3, [pc, #604]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fba6 	bl	8000ef4 <HAL_GetTick>
 80017a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fba2 	bl	8000ef4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e2d7      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017be:	4b8e      	ldr	r3, [pc, #568]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06a      	beq.n	80018ac <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017e0:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d007      	beq.n	80017fc <HAL_RCC_OscConfig+0x2e0>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b18      	cmp	r3, #24
 80017f0:	d11b      	bne.n	800182a <HAL_RCC_OscConfig+0x30e>
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d116      	bne.n	800182a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_OscConfig+0x2f8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b80      	cmp	r3, #128	; 0x80
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2ac      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001814:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	4975      	ldr	r1, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001828:	e040      	b.n	80018ac <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d023      	beq.n	800187a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001832:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a70      	ldr	r2, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff fb59 	bl	8000ef4 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001846:	f7ff fb55 	bl	8000ef4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e28a      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001864:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	4961      	ldr	r1, [pc, #388]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e018      	b.n	80018ac <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800187a:	4b5f      	ldr	r3, [pc, #380]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fb35 	bl	8000ef4 <HAL_GetTick>
 800188a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800188e:	f7ff fb31 	bl	8000ef4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e266      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018a0:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d036      	beq.n	8001926 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d019      	beq.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff fb12 	bl	8000ef4 <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb0e 	bl	8000ef4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e243      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e6:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3b8>
 80018f2:	e018      	b.n	8001926 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	4a3f      	ldr	r2, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff faf8 	bl	8000ef4 <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff faf4 	bl	8000ef4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e229      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001944:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001946:	f7ff fad5 	bl	8000ef4 <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194e:	f7ff fad1 	bl	8000ef4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e206      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x432>
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800197a:	f7ff fabb 	bl	8000ef4 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001982:	f7ff fab7 	bl	8000ef4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1ec      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80af 	beq.w	8001b0c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCC_OscConfig+0x4e0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x4e0>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019ba:	f7ff fa9b 	bl	8000ef4 <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fa97 	bl	8000ef4 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1cc      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_OscConfig+0x4e0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4e4>
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a02      	ldr	r2, [pc, #8]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e05b      	b.n	8001aae <HAL_RCC_OscConfig+0x592>
 80019f6:	bf00      	nop
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58024800 	.word	0x58024800
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d112      	bne.n	8001a2e <HAL_RCC_OscConfig+0x512>
 8001a08:	4b9d      	ldr	r3, [pc, #628]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a9c      	ldr	r2, [pc, #624]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a99      	ldr	r2, [pc, #612]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	4b97      	ldr	r3, [pc, #604]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a96      	ldr	r2, [pc, #600]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a26:	f023 0304 	bic.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e03f      	b.n	8001aae <HAL_RCC_OscConfig+0x592>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d112      	bne.n	8001a5c <HAL_RCC_OscConfig+0x540>
 8001a36:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a91      	ldr	r2, [pc, #580]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b8f      	ldr	r3, [pc, #572]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a8e      	ldr	r2, [pc, #568]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a8b      	ldr	r2, [pc, #556]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5a:	e028      	b.n	8001aae <HAL_RCC_OscConfig+0x592>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b85      	cmp	r3, #133	; 0x85
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x56e>
 8001a64:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a85      	ldr	r2, [pc, #532]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	4b83      	ldr	r3, [pc, #524]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a82      	ldr	r2, [pc, #520]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a7f      	ldr	r2, [pc, #508]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	e011      	b.n	8001aae <HAL_RCC_OscConfig+0x592>
 8001a8a:	4b7d      	ldr	r3, [pc, #500]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	4a7c      	ldr	r2, [pc, #496]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6713      	str	r3, [r2, #112]	; 0x70
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa2:	4b77      	ldr	r3, [pc, #476]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	4a76      	ldr	r2, [pc, #472]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fa1d 	bl	8000ef4 <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fa19 	bl	8000ef4 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e14c      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ee      	beq.n	8001abe <HAL_RCC_OscConfig+0x5a2>
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fa07 	bl	8000ef4 <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fa03 	bl	8000ef4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e136      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b00:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ee      	bne.n	8001aea <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 812b 	beq.w	8001d6c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b1e:	2b18      	cmp	r3, #24
 8001b20:	f000 80bb 	beq.w	8001c9a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	f040 8095 	bne.w	8001c58 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a53      	ldr	r2, [pc, #332]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f9db 	bl	8000ef4 <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff f9d7 	bl	8000ef4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e10c      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b64:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_OscConfig+0x768>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	430a      	orrs	r2, r1
 8001b74:	4942      	ldr	r1, [pc, #264]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	628b      	str	r3, [r1, #40]	; 0x28
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	3b01      	subs	r3, #1
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001baa:	4935      	ldr	r1, [pc, #212]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc8:	00d2      	lsls	r2, r2, #3
 8001bca:	492d      	ldr	r1, [pc, #180]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	f023 020c 	bic.w	r2, r3, #12
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4928      	ldr	r1, [pc, #160]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f023 0202 	bic.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4924      	ldr	r1, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f960 	bl	8000ef4 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f95c 	bl	8000ef4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e091      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x71c>
 8001c56:	e089      	b.n	8001d6c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_RCC_OscConfig+0x764>)
 8001c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f946 	bl	8000ef4 <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6a:	e00f      	b.n	8001c8c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f942 	bl	8000ef4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d908      	bls.n	8001c8c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e077      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	fffffc0c 	.word	0xfffffc0c
 8001c88:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e9      	bne.n	8001c6c <HAL_RCC_OscConfig+0x750>
 8001c98:	e068      	b.n	8001d6c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d031      	beq.n	8001d12 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d12a      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d122      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d11a      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	0a5b      	lsrs	r3, r3, #9
 8001ce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d111      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d108      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	0e1b      	lsrs	r3, r3, #24
 8001d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e02b      	b.n	8001d6e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	08db      	lsrs	r3, r3, #3
 8001d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d20:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d01f      	beq.n	8001d6c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d38:	f7ff f8dc 	bl	8000ef4 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d3e:	bf00      	nop
 8001d40:	f7ff f8d8 	bl	8000ef4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d0f9      	beq.n	8001d40 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x860>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d58:	00d2      	lsls	r2, r2, #3
 8001d5a:	4907      	ldr	r1, [pc, #28]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_RCC_OscConfig+0x85c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	ffff0007 	.word	0xffff0007

08001d80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e19c      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b87      	ldr	r3, [pc, #540]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 020f 	bic.w	r2, r3, #15
 8001daa:	4985      	ldr	r1, [pc, #532]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b83      	ldr	r3, [pc, #524]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e184      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001de0:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4975      	ldr	r1, [pc, #468]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d908      	bls.n	8001e20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	496a      	ldr	r1, [pc, #424]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	495e      	ldr	r1, [pc, #376]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4953      	ldr	r1, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d908      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f023 020f 	bic.w	r2, r3, #15
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4947      	ldr	r1, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d055      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4940      	ldr	r1, [pc, #256]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d121      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0f6      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d115      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0ea      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0de      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f10:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d6      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f023 0207 	bic.w	r2, r3, #7
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f32:	f7fe ffdf 	bl	8000ef4 <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7fe ffdb 	bl	8000ef4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0be      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d1eb      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d208      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f023 020f 	bic.w	r2, r3, #15
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d214      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e086      	b.n	80020ce <HAL_RCC_ClockConfig+0x34e>
 8001fc0:	52002000 	.word	0x52002000
 8001fc4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d010      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d208      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4939      	ldr	r1, [pc, #228]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200e:	429a      	cmp	r2, r3
 8002010:	d208      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	492e      	ldr	r1, [pc, #184]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800203c:	429a      	cmp	r2, r3
 800203e:	d208      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 800204e:	4313      	orrs	r3, r2
 8002050:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800206a:	429a      	cmp	r2, r3
 800206c:	d208      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4917      	ldr	r1, [pc, #92]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 800207c:	4313      	orrs	r3, r2
 800207e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002080:	f000 f834 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	4912      	ldr	r1, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x35c>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_RCC_ClockConfig+0x358>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_RCC_ClockConfig+0x35c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x360>)
 80020b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x364>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x368>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fecc 	bl	8000e60 <HAL_InitTick>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	58024400 	.word	0x58024400
 80020dc:	08005980 	.word	0x08005980
 80020e0:	24000004 	.word	0x24000004
 80020e4:	24000000 	.word	0x24000000
 80020e8:	24000008 	.word	0x24000008

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f2:	4bb3      	ldr	r3, [pc, #716]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020fa:	2b18      	cmp	r3, #24
 80020fc:	f200 8155 	bhi.w	80023aa <HAL_RCC_GetSysClockFreq+0x2be>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	0800216d 	.word	0x0800216d
 800210c:	080023ab 	.word	0x080023ab
 8002110:	080023ab 	.word	0x080023ab
 8002114:	080023ab 	.word	0x080023ab
 8002118:	080023ab 	.word	0x080023ab
 800211c:	080023ab 	.word	0x080023ab
 8002120:	080023ab 	.word	0x080023ab
 8002124:	080023ab 	.word	0x080023ab
 8002128:	08002193 	.word	0x08002193
 800212c:	080023ab 	.word	0x080023ab
 8002130:	080023ab 	.word	0x080023ab
 8002134:	080023ab 	.word	0x080023ab
 8002138:	080023ab 	.word	0x080023ab
 800213c:	080023ab 	.word	0x080023ab
 8002140:	080023ab 	.word	0x080023ab
 8002144:	080023ab 	.word	0x080023ab
 8002148:	08002199 	.word	0x08002199
 800214c:	080023ab 	.word	0x080023ab
 8002150:	080023ab 	.word	0x080023ab
 8002154:	080023ab 	.word	0x080023ab
 8002158:	080023ab 	.word	0x080023ab
 800215c:	080023ab 	.word	0x080023ab
 8002160:	080023ab 	.word	0x080023ab
 8002164:	080023ab 	.word	0x080023ab
 8002168:	0800219f 	.word	0x0800219f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800216c:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002178:	4b91      	ldr	r3, [pc, #580]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	4a90      	ldr	r2, [pc, #576]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800218a:	e111      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800218c:	4b8d      	ldr	r3, [pc, #564]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800218e:	61bb      	str	r3, [r7, #24]
      break;
 8002190:	e10e      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002194:	61bb      	str	r3, [r7, #24]
      break;
 8002196:	e10b      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002198:	4b8c      	ldr	r3, [pc, #560]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800219a:	61bb      	str	r3, [r7, #24]
      break;
 800219c:	e108      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800219e:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021a8:	4b85      	ldr	r3, [pc, #532]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021b4:	4b82      	ldr	r3, [pc, #520]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80021be:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	08db      	lsrs	r3, r3, #3
 80021c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80e1 	beq.w	80023a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	f000 8083 	beq.w	80022f0 <HAL_RCC_GetSysClockFreq+0x204>
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	f200 80a1 	bhi.w	8002334 <HAL_RCC_GetSysClockFreq+0x248>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x114>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d056      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80021fe:	e099      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02d      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	08db      	lsrs	r3, r3, #3
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	4a6b      	ldr	r2, [pc, #428]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002236:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002246:	ed97 6a02 	vldr	s12, [r7, #8]
 800224a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800224e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002266:	e087      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002272:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227a:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228a:	ed97 6a02 	vldr	s12, [r7, #8]
 800228e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800229e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022aa:	e065      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022be:	4b40      	ldr	r3, [pc, #256]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ee:	e043      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80022fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002312:	ed97 6a02 	vldr	s12, [r7, #8]
 8002316:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800231a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800231e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002332:	e021      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002356:	ed97 6a02 	vldr	s12, [r7, #8]
 800235a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800235e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800236a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800236e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002376:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	0a5b      	lsrs	r3, r3, #9
 800237e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002382:	3301      	adds	r3, #1
 8002384:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002390:	edd7 6a07 	vldr	s13, [r7, #28]
 8002394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023a2:	e005      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
      break;
 80023a8:	e002      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023ac:	61bb      	str	r3, [r7, #24]
      break;
 80023ae:	bf00      	nop
  }

  return sysclockfreq;
 80023b0:	69bb      	ldr	r3, [r7, #24]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	58024400 	.word	0x58024400
 80023c4:	03d09000 	.word	0x03d09000
 80023c8:	003d0900 	.word	0x003d0900
 80023cc:	007a1200 	.word	0x007a1200
 80023d0:	46000000 	.word	0x46000000
 80023d4:	4c742400 	.word	0x4c742400
 80023d8:	4a742400 	.word	0x4a742400
 80023dc:	4af42400 	.word	0x4af42400

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023e6:	f7ff fe81 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_GetHCLKFreq+0x50>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490f      	ldr	r1, [pc, #60]	; (8002434 <HAL_RCC_GetHCLKFreq+0x54>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_GetHCLKFreq+0x50>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_RCC_GetHCLKFreq+0x54>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_RCC_GetHCLKFreq+0x58>)
 800241c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_GetHCLKFreq+0x58>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	58024400 	.word	0x58024400
 8002434:	08005980 	.word	0x08005980
 8002438:	24000004 	.word	0x24000004
 800243c:	24000000 	.word	0x24000000

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002444:	f7ff ffcc 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	58024400 	.word	0x58024400
 8002468:	08005980 	.word	0x08005980

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002470:	f7ff ffb6 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4904      	ldr	r1, [pc, #16]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	58024400 	.word	0x58024400
 8002494:	08005980 	.word	0x08005980

08002498 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800249c:	b0c8      	sub	sp, #288	; 0x120
 800249e:	af00      	add	r7, sp, #0
 80024a0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80024bc:	2500      	movs	r5, #0
 80024be:	ea54 0305 	orrs.w	r3, r4, r5
 80024c2:	d049      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80024c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024ce:	d02f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024d4:	d828      	bhi.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024da:	d01a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024e0:	d822      	bhi.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ea:	d007      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024ec:	e01c      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ee:	4ba7      	ldr	r3, [pc, #668]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	4aa6      	ldr	r2, [pc, #664]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024fa:	e01a      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002500:	3308      	adds	r3, #8
 8002502:	2102      	movs	r1, #2
 8002504:	4618      	mov	r0, r3
 8002506:	f001 fc43 	bl	8003d90 <RCCEx_PLL2_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002510:	e00f      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002516:	3328      	adds	r3, #40	; 0x28
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f001 fcea 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002526:	e004      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800252e:	e000      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002532:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800253a:	4b94      	ldr	r3, [pc, #592]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002548:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254a:	430b      	orrs	r3, r1
 800254c:	6513      	str	r3, [r2, #80]	; 0x50
 800254e:	e003      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002554:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002564:	f04f 0900 	mov.w	r9, #0
 8002568:	ea58 0309 	orrs.w	r3, r8, r9
 800256c:	d047      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800256e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	2b04      	cmp	r3, #4
 8002576:	d82a      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	08002595 	.word	0x08002595
 8002584:	080025a3 	.word	0x080025a3
 8002588:	080025b9 	.word	0x080025b9
 800258c:	080025d7 	.word	0x080025d7
 8002590:	080025d7 	.word	0x080025d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002594:	4b7d      	ldr	r3, [pc, #500]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4a7c      	ldr	r2, [pc, #496]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025a0:	e01a      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a6:	3308      	adds	r3, #8
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 fbf0 	bl	8003d90 <RCCEx_PLL2_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025b6:	e00f      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025bc:	3328      	adds	r3, #40	; 0x28
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fc97 	bl	8003ef4 <RCCEx_PLL3_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025cc:	e004      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025d4:	e000      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	f023 0107 	bic.w	r1, r3, #7
 80025e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6513      	str	r3, [r2, #80]	; 0x50
 80025f4:	e003      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80025fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002606:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800260a:	f04f 0b00 	mov.w	fp, #0
 800260e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002612:	d054      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800261e:	d036      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002620:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002624:	d82f      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262a:	d032      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800262c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002630:	d829      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002632:	2bc0      	cmp	r3, #192	; 0xc0
 8002634:	d02f      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002636:	2bc0      	cmp	r3, #192	; 0xc0
 8002638:	d825      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d018      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d821      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d007      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800264a:	e01c      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	4a4e      	ldr	r2, [pc, #312]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002658:	e01e      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800265a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800265e:	3308      	adds	r3, #8
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f001 fb94 	bl	8003d90 <RCCEx_PLL2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800266e:	e013      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002674:	3328      	adds	r3, #40	; 0x28
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fc3b 	bl	8003ef4 <RCCEx_PLL3_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002684:	e008      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800268c:	e004      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026a0:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80026a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	4a37      	ldr	r2, [pc, #220]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b0:	430b      	orrs	r3, r1
 80026b2:	6513      	str	r3, [r2, #80]	; 0x50
 80026b4:	e003      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80026be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80026ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80026d8:	460b      	mov	r3, r1
 80026da:	4313      	orrs	r3, r2
 80026dc:	d05c      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80026de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026e8:	d03b      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026ea:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026ee:	d834      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f4:	d037      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80026f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026fa:	d82e      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80026fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002700:	d033      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002702:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002706:	d828      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d01a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d822      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271c:	d007      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800271e:	e01c      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800272c:	e01e      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800272e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002732:	3308      	adds	r3, #8
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fb2a 	bl	8003d90 <RCCEx_PLL2_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002742:	e013      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002748:	3328      	adds	r3, #40	; 0x28
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fbd1 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002758:	e008      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002760:	e004      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800276a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800276c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10d      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800277c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	4a02      	ldr	r2, [pc, #8]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002784:	430b      	orrs	r3, r1
 8002786:	6513      	str	r3, [r2, #80]	; 0x50
 8002788:	e006      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800278a:	bf00      	nop
 800278c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002794:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80027a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80027b2:	460b      	mov	r3, r1
 80027b4:	4313      	orrs	r3, r2
 80027b6:	d03a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80027b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	2b30      	cmp	r3, #48	; 0x30
 80027c0:	d01f      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80027c2:	2b30      	cmp	r3, #48	; 0x30
 80027c4:	d819      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d00c      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d815      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d019      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d111      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d6:	4bae      	ldr	r3, [pc, #696]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	4aad      	ldr	r2, [pc, #692]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027e2:	e011      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e8:	3308      	adds	r3, #8
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 facf 	bl	8003d90 <RCCEx_PLL2_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027f8:	e006      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002800:	e002      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002810:	4b9f      	ldr	r3, [pc, #636]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	4a9c      	ldr	r2, [pc, #624]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002820:	430b      	orrs	r3, r1
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	e003      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800282a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800282e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800283a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002844:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002848:	460b      	mov	r3, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	d051      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800284e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002858:	d035      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800285a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800285e:	d82e      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002864:	d031      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800286a:	d828      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x426>
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d01a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	d822      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d007      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002882:	e01c      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002884:	4b82      	ldr	r3, [pc, #520]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	4a81      	ldr	r2, [pc, #516]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800288a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002890:	e01c      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002896:	3308      	adds	r3, #8
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fa78 	bl	8003d90 <RCCEx_PLL2_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028a6:	e011      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ac:	3328      	adds	r3, #40	; 0x28
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 fb1f 	bl	8003ef4 <RCCEx_PLL3_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028bc:	e006      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028c4:	e002      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80028ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028d4:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80028dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e2:	4a6b      	ldr	r2, [pc, #428]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6513      	str	r3, [r2, #80]	; 0x50
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80028fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002908:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800290c:	460b      	mov	r3, r1
 800290e:	4313      	orrs	r3, r2
 8002910:	d053      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d033      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800291e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002922:	d82c      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002928:	d02f      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800292a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800292e:	d826      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002934:	d02b      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800293a:	d820      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800293c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002940:	d012      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002946:	d81a      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d022      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d115      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002956:	3308      	adds	r3, #8
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fa18 	bl	8003d90 <RCCEx_PLL2_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002966:	e015      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800296c:	3328      	adds	r3, #40	; 0x28
 800296e:	2101      	movs	r1, #1
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fabf 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800297c:	e00a      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002986:	bf00      	nop
 8002988:	e004      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800298a:	bf00      	nop
 800298c:	e002      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029aa:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6513      	str	r3, [r2, #80]	; 0x50
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80029c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4313      	orrs	r3, r2
 80029d8:	d060      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029e2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029e6:	d039      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80029e8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029ec:	d832      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f2:	d035      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80029f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f8:	d82c      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d031      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d826      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a0a:	d02d      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002a0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a10:	d820      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a16:	d012      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1c:	d81a      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d024      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a26:	d115      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 f9ad 	bl	8003d90 <RCCEx_PLL2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a3c:	e017      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a42:	3328      	adds	r3, #40	; 0x28
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 fa54 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a52:	e00c      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a5a:	e008      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a5c:	bf00      	nop
 8002a5e:	e006      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a60:	bf00      	nop
 8002a62:	e004      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a64:	bf00      	nop
 8002a66:	e002      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a68:	bf00      	nop
 8002a6a:	e000      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a86:	4a02      	ldr	r2, [pc, #8]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8c:	e006      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a8e:	bf00      	nop
 8002a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	d037      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d816      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d018      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad6:	d111      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad8:	4bc4      	ldr	r3, [pc, #784]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4ac3      	ldr	r2, [pc, #780]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ae4:	e00f      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aea:	3308      	adds	r3, #8
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f94e 	bl	8003d90 <RCCEx_PLL2_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002afa:	e004      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b02:	e000      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b0e:	4bb7      	ldr	r3, [pc, #732]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b12:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1c:	4ab3      	ldr	r2, [pc, #716]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6513      	str	r3, [r2, #80]	; 0x50
 8002b22:	e003      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	d039      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d81c      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002b99 	.word	0x08002b99
 8002b60:	08002b6d 	.word	0x08002b6d
 8002b64:	08002b7b 	.word	0x08002b7b
 8002b68:	08002b99 	.word	0x08002b99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b6c:	4b9f      	ldr	r3, [pc, #636]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	4a9e      	ldr	r2, [pc, #632]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b78:	e00f      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b7e:	3308      	adds	r3, #8
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 f904 	bl	8003d90 <RCCEx_PLL2_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b8e:	e004      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b96:	e000      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ba2:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	f023 0103 	bic.w	r1, r3, #3
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	4a8e      	ldr	r2, [pc, #568]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb6:	e003      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f000 8099 	beq.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be2:	4b83      	ldr	r3, [pc, #524]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a82      	ldr	r2, [pc, #520]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bee:	f7fe f981 	bl	8000ef4 <HAL_GetTick>
 8002bf2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fe f97c 	bl	8000ef4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d903      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c0e:	e005      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c10:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ed      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002c1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d173      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c24:	4b71      	ldr	r3, [pc, #452]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c30:	4053      	eors	r3, r2
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c46:	4b69      	ldr	r3, [pc, #420]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a68      	ldr	r2, [pc, #416]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c52:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c5e:	4a63      	ldr	r2, [pc, #396]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d118      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe f93e 	bl	8000ef4 <HAL_GetTick>
 8002c78:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7c:	e00d      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe f939 	bl	8000ef4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c88:	1ad2      	subs	r2, r2, r3
 8002c8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d903      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002c98:	e005      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c9a:	4b54      	ldr	r3, [pc, #336]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0eb      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d129      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cbe:	d10e      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cd0:	091a      	lsrs	r2, r3, #4
 8002cd2:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	4a45      	ldr	r2, [pc, #276]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6113      	str	r3, [r2, #16]
 8002cdc:	e005      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002cde:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	4a42      	ldr	r2, [pc, #264]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ce8:	6113      	str	r3, [r2, #16]
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	4a3c      	ldr	r2, [pc, #240]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e008      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f002 0301 	and.w	r3, r2, #1
 8002d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f000 8090 	beq.w	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3e:	2b28      	cmp	r3, #40	; 0x28
 8002d40:	d870      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002e2d 	.word	0x08002e2d
 8002d4c:	08002e25 	.word	0x08002e25
 8002d50:	08002e25 	.word	0x08002e25
 8002d54:	08002e25 	.word	0x08002e25
 8002d58:	08002e25 	.word	0x08002e25
 8002d5c:	08002e25 	.word	0x08002e25
 8002d60:	08002e25 	.word	0x08002e25
 8002d64:	08002e25 	.word	0x08002e25
 8002d68:	08002df9 	.word	0x08002df9
 8002d6c:	08002e25 	.word	0x08002e25
 8002d70:	08002e25 	.word	0x08002e25
 8002d74:	08002e25 	.word	0x08002e25
 8002d78:	08002e25 	.word	0x08002e25
 8002d7c:	08002e25 	.word	0x08002e25
 8002d80:	08002e25 	.word	0x08002e25
 8002d84:	08002e25 	.word	0x08002e25
 8002d88:	08002e0f 	.word	0x08002e0f
 8002d8c:	08002e25 	.word	0x08002e25
 8002d90:	08002e25 	.word	0x08002e25
 8002d94:	08002e25 	.word	0x08002e25
 8002d98:	08002e25 	.word	0x08002e25
 8002d9c:	08002e25 	.word	0x08002e25
 8002da0:	08002e25 	.word	0x08002e25
 8002da4:	08002e25 	.word	0x08002e25
 8002da8:	08002e2d 	.word	0x08002e2d
 8002dac:	08002e25 	.word	0x08002e25
 8002db0:	08002e25 	.word	0x08002e25
 8002db4:	08002e25 	.word	0x08002e25
 8002db8:	08002e25 	.word	0x08002e25
 8002dbc:	08002e25 	.word	0x08002e25
 8002dc0:	08002e25 	.word	0x08002e25
 8002dc4:	08002e25 	.word	0x08002e25
 8002dc8:	08002e2d 	.word	0x08002e2d
 8002dcc:	08002e25 	.word	0x08002e25
 8002dd0:	08002e25 	.word	0x08002e25
 8002dd4:	08002e25 	.word	0x08002e25
 8002dd8:	08002e25 	.word	0x08002e25
 8002ddc:	08002e25 	.word	0x08002e25
 8002de0:	08002e25 	.word	0x08002e25
 8002de4:	08002e25 	.word	0x08002e25
 8002de8:	08002e2d 	.word	0x08002e2d
 8002dec:	58024400 	.word	0x58024400
 8002df0:	58024800 	.word	0x58024800
 8002df4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ffc5 	bl	8003d90 <RCCEx_PLL2_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e0c:	e00f      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e12:	3328      	adds	r3, #40	; 0x28
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 f86c 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e22:	e004      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e36:	4bc0      	ldr	r3, [pc, #768]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	4abc      	ldr	r2, [pc, #752]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6553      	str	r3, [r2, #84]	; 0x54
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f002 0302 	and.w	r3, r2, #2
 8002e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e6c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e70:	460b      	mov	r3, r1
 8002e72:	4313      	orrs	r3, r2
 8002e74:	d043      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d824      	bhi.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002ea1 	.word	0x08002ea1
 8002e90:	08002eb7 	.word	0x08002eb7
 8002e94:	08002ed5 	.word	0x08002ed5
 8002e98:	08002ed5 	.word	0x08002ed5
 8002e9c:	08002ed5 	.word	0x08002ed5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 ff71 	bl	8003d90 <RCCEx_PLL2_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002eb4:	e00f      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eba:	3328      	adds	r3, #40	; 0x28
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 f818 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002eca:	e004      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10b      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ede:	4b96      	ldr	r3, [pc, #600]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f023 0107 	bic.w	r1, r3, #7
 8002ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eee:	4a92      	ldr	r2, [pc, #584]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6553      	str	r3, [r2, #84]	; 0x54
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002efa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f002 0304 	and.w	r3, r2, #4
 8002f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f14:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	d043      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d824      	bhi.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f7d 	.word	0x08002f7d
 8002f34:	08002f49 	.word	0x08002f49
 8002f38:	08002f5f 	.word	0x08002f5f
 8002f3c:	08002f7d 	.word	0x08002f7d
 8002f40:	08002f7d 	.word	0x08002f7d
 8002f44:	08002f7d 	.word	0x08002f7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 ff1d 	bl	8003d90 <RCCEx_PLL2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f5c:	e00f      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 ffc4 	bl	8003ef4 <RCCEx_PLL3_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f86:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f023 0107 	bic.w	r1, r3, #7
 8002f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f96:	4a68      	ldr	r2, [pc, #416]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f002 0320 	and.w	r3, r2, #32
 8002fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d055      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd2:	d033      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd8:	d82c      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d02f      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d826      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fea:	d02b      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002fec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ff0:	d820      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff6:	d012      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d81a      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d022      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003006:	d115      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800300c:	3308      	adds	r3, #8
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 febd 	bl	8003d90 <RCCEx_PLL2_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800301c:	e015      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003022:	3328      	adds	r3, #40	; 0x28
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 ff64 	bl	8003ef4 <RCCEx_PLL3_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003032:	e00a      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800303a:	e006      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800303c:	bf00      	nop
 800303e:	e004      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800305a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003064:	430b      	orrs	r3, r1
 8003066:	6553      	str	r3, [r2, #84]	; 0x54
 8003068:	e003      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800306e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800307e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003088:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800308c:	460b      	mov	r3, r1
 800308e:	4313      	orrs	r3, r2
 8003090:	d058      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800309a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800309e:	d033      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80030a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030a4:	d82c      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d02f      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d826      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b6:	d02b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80030b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030bc:	d820      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c2:	d012      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	d81a      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d022      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d115      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d8:	3308      	adds	r3, #8
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fe57 	bl	8003d90 <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030e8:	e015      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ee:	3328      	adds	r3, #40	; 0x28
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fefe 	bl	8003ef4 <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030fe:	e00a      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003106:	e006      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003108:	bf00      	nop
 800310a:	e004      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800310c:	bf00      	nop
 800310e:	e002      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003116:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10e      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800312e:	4a02      	ldr	r2, [pc, #8]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003130:	430b      	orrs	r3, r1
 8003132:	6593      	str	r3, [r2, #88]	; 0x58
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003136:	bf00      	nop
 8003138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003140:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800315a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800315e:	460b      	mov	r3, r1
 8003160:	4313      	orrs	r3, r2
 8003162:	d055      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800316c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003170:	d033      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003172:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003176:	d82c      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317c:	d02f      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800317e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003182:	d826      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003184:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003188:	d02b      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800318a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800318e:	d820      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003194:	d012      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319a:	d81a      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d022      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80031a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a4:	d115      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031aa:	3308      	adds	r3, #8
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fdee 	bl	8003d90 <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031ba:	e015      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fe95 	bl	8003ef4 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031d0:	e00a      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031d8:	e006      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031da:	bf00      	nop
 80031dc:	e004      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031de:	bf00      	nop
 80031e0:	e002      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031e2:	bf00      	nop
 80031e4:	e000      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80031e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031f0:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003200:	4a9d      	ldr	r2, [pc, #628]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003202:	430b      	orrs	r3, r1
 8003204:	6593      	str	r3, [r2, #88]	; 0x58
 8003206:	e003      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800320c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f002 0308 	and.w	r3, r2, #8
 800321c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003226:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800322a:	460b      	mov	r3, r1
 800322c:	4313      	orrs	r3, r2
 800322e:	d01e      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800323e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003242:	3328      	adds	r3, #40	; 0x28
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fe54 	bl	8003ef4 <RCCEx_PLL3_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003258:	4b87      	ldr	r3, [pc, #540]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003268:	4a83      	ldr	r2, [pc, #524]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800326a:	430b      	orrs	r3, r1
 800326c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800326e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f002 0310 	and.w	r3, r2, #16
 800327a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003284:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003288:	460b      	mov	r3, r1
 800328a:	4313      	orrs	r3, r2
 800328c:	d01e      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800328e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d10c      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800329c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a0:	3328      	adds	r3, #40	; 0x28
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fe25 	bl	8003ef4 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032b6:	4b70      	ldr	r3, [pc, #448]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032c6:	4a6c      	ldr	r2, [pc, #432]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80032d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d03e      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80032ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f8:	d022      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80032fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032fe:	d81b      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	d00b      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800330a:	e015      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003310:	3308      	adds	r3, #8
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fd3b 	bl	8003d90 <RCCEx_PLL2_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003320:	e00f      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003326:	3328      	adds	r3, #40	; 0x28
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fde2 	bl	8003ef4 <RCCEx_PLL3_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003336:	e004      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10b      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800334a:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800335a:	4a47      	ldr	r2, [pc, #284]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335c:	430b      	orrs	r3, r1
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	e003      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003366:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800336a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003376:	67bb      	str	r3, [r7, #120]	; 0x78
 8003378:	2300      	movs	r3, #0
 800337a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800337c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003380:	460b      	mov	r3, r1
 8003382:	4313      	orrs	r3, r2
 8003384:	d03b      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003392:	d01f      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003398:	d818      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80033a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a4:	d007      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80033a6:	e011      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a8:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a32      	ldr	r2, [pc, #200]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80033b4:	e00f      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ba:	3328      	adds	r3, #40	; 0x28
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd98 	bl	8003ef4 <RCCEx_PLL3_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80033ca:	e004      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80033d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6553      	str	r3, [r2, #84]	; 0x54
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800340a:	673b      	str	r3, [r7, #112]	; 0x70
 800340c:	2300      	movs	r3, #0
 800340e:	677b      	str	r3, [r7, #116]	; 0x74
 8003410:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003414:	460b      	mov	r3, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	d034      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d007      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800342a:	e011      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003438:	e00e      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800343a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343e:	3308      	adds	r3, #8
 8003440:	2102      	movs	r1, #2
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fca4 	bl	8003d90 <RCCEx_PLL2_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10d      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	4a02      	ldr	r2, [pc, #8]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003470:	430b      	orrs	r3, r1
 8003472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003480:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003490:	66bb      	str	r3, [r7, #104]	; 0x68
 8003492:	2300      	movs	r3, #0
 8003494:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003496:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800349a:	460b      	mov	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	d00c      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	3328      	adds	r3, #40	; 0x28
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fd23 	bl	8003ef4 <RCCEx_PLL3_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80034c6:	663b      	str	r3, [r7, #96]	; 0x60
 80034c8:	2300      	movs	r3, #0
 80034ca:	667b      	str	r3, [r7, #100]	; 0x64
 80034cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80034d0:	460b      	mov	r3, r1
 80034d2:	4313      	orrs	r3, r2
 80034d4:	d038      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80034d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e2:	d018      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80034e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e8:	d811      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ee:	d014      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80034f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f4:	d80b      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d011      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80034fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fe:	d106      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003500:	4bc3      	ldr	r3, [pc, #780]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	4ac2      	ldr	r2, [pc, #776]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800350c:	e008      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003514:	e004      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800351e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003528:	4bb9      	ldr	r3, [pc, #740]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	4ab5      	ldr	r2, [pc, #724]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800353a:	430b      	orrs	r3, r1
 800353c:	6553      	str	r3, [r2, #84]	; 0x54
 800353e:	e003      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003544:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003554:	65bb      	str	r3, [r7, #88]	; 0x58
 8003556:	2300      	movs	r3, #0
 8003558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800355a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800355e:	460b      	mov	r3, r1
 8003560:	4313      	orrs	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003564:	4baa      	ldr	r3, [pc, #680]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003572:	4aa7      	ldr	r2, [pc, #668]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
 8003586:	2300      	movs	r3, #0
 8003588:	657b      	str	r3, [r7, #84]	; 0x54
 800358a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800358e:	460b      	mov	r3, r1
 8003590:	4313      	orrs	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003594:	4b9e      	ldr	r3, [pc, #632]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a9b      	ldr	r2, [pc, #620]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b6:	2300      	movs	r3, #0
 80035b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80035c4:	4b92      	ldr	r3, [pc, #584]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80035cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	4a8f      	ldr	r2, [pc, #572]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
 80035e6:	2300      	movs	r3, #0
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80035ee:	460b      	mov	r3, r1
 80035f0:	4313      	orrs	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035f4:	4b86      	ldr	r3, [pc, #536]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	4a85      	ldr	r2, [pc, #532]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035fe:	6113      	str	r3, [r2, #16]
 8003600:	4b83      	ldr	r3, [pc, #524]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003602:	6919      	ldr	r1, [r3, #16]
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003608:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800360c:	4a80      	ldr	r2, [pc, #512]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800360e:	430b      	orrs	r3, r1
 8003610:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800361e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003624:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003628:	460b      	mov	r3, r1
 800362a:	4313      	orrs	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800362e:	4b78      	ldr	r3, [pc, #480]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	4a74      	ldr	r2, [pc, #464]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800363e:	430b      	orrs	r3, r1
 8003640:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800364e:	633b      	str	r3, [r7, #48]	; 0x30
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
 8003654:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800365e:	4b6c      	ldr	r3, [pc, #432]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366e:	4a68      	ldr	r2, [pc, #416]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	2100      	movs	r1, #0
 800367e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003686:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800368a:	460b      	mov	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	d011      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003694:	3308      	adds	r3, #8
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fb79 	bl	8003d90 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80036b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	2100      	movs	r1, #0
 80036be:	6239      	str	r1, [r7, #32]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	d011      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	3308      	adds	r3, #8
 80036d6:	2101      	movs	r1, #1
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fb59 	bl	8003d90 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	2100      	movs	r1, #0
 80036fe:	61b9      	str	r1, [r7, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800370a:	460b      	mov	r3, r1
 800370c:	4313      	orrs	r3, r2
 800370e:	d011      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003714:	3308      	adds	r3, #8
 8003716:	2102      	movs	r1, #2
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fb39 	bl	8003d90 <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003724:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003730:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	2100      	movs	r1, #0
 800373e:	6139      	str	r1, [r7, #16]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d011      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003754:	3328      	adds	r3, #40	; 0x28
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fbcb 	bl	8003ef4 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003770:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	2100      	movs	r1, #0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d011      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003794:	3328      	adds	r3, #40	; 0x28
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fbab 	bl	8003ef4 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80037b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	2100      	movs	r1, #0
 80037be:	6039      	str	r1, [r7, #0]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	d011      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fb8b 	bl	8003ef4 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80037f4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
}
 8003802:	4618      	mov	r0, r3
 8003804:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380e:	bf00      	nop
 8003810:	58024400 	.word	0x58024400

08003814 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003818:	f7fe fde2 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4904      	ldr	r1, [pc, #16]	; (800383c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	58024400 	.word	0x58024400
 800383c:	08005980 	.word	0x08005980

08003840 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003848:	4ba1      	ldr	r3, [pc, #644]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003852:	4b9f      	ldr	r3, [pc, #636]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	0b1b      	lsrs	r3, r3, #12
 8003858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800385c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800385e:	4b9c      	ldr	r3, [pc, #624]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800386a:	4b99      	ldr	r3, [pc, #612]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	08db      	lsrs	r3, r3, #3
 8003870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8111 	beq.w	8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f000 8083 	beq.w	800399c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	f200 80a1 	bhi.w	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d056      	beq.n	8003958 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038aa:	e099      	b.n	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038ac:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02d      	beq.n	8003914 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b8:	4b85      	ldr	r3, [pc, #532]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	08db      	lsrs	r3, r3, #3
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	4a84      	ldr	r2, [pc, #528]	; (8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003912:	e087      	b.n	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003926:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003936:	ed97 6a03 	vldr	s12, [r7, #12]
 800393a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003956:	e065      	b.n	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396a:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397a:	ed97 6a03 	vldr	s12, [r7, #12]
 800397e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800398e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800399a:	e043      	b.n	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b48      	ldr	r3, [pc, #288]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039de:	e021      	b.n	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4a:	ee17 2a90 	vmov	r2, s15
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a78:	ee17 2a90 	vmov	r2, s15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa6:	ee17 2a90 	vmov	r2, s15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003aae:	e008      	b.n	8003ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
}
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	03d09000 	.word	0x03d09000
 8003ad8:	46000000 	.word	0x46000000
 8003adc:	4c742400 	.word	0x4c742400
 8003ae0:	4a742400 	.word	0x4a742400
 8003ae4:	4af42400 	.word	0x4af42400

08003ae8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003af0:	4ba1      	ldr	r3, [pc, #644]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003afa:	4b9f      	ldr	r3, [pc, #636]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	0d1b      	lsrs	r3, r3, #20
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b06:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b12:	4b99      	ldr	r3, [pc, #612]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	08db      	lsrs	r3, r3, #3
 8003b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8111 	beq.w	8003d58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f000 8083 	beq.w	8003c44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	f200 80a1 	bhi.w	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d056      	beq.n	8003c00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b52:	e099      	b.n	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b54:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02d      	beq.n	8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b60:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	08db      	lsrs	r3, r3, #3
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	4a84      	ldr	r2, [pc, #528]	; (8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8a:	4b7b      	ldr	r3, [pc, #492]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bba:	e087      	b.n	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfe:	e065      	b.n	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c42:	e043      	b.n	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b48      	ldr	r3, [pc, #288]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c86:	e021      	b.n	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9a:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	0a5b      	lsrs	r3, r3, #9
 8003cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf2:	ee17 2a90 	vmov	r2, s15
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d20:	ee17 2a90 	vmov	r2, s15
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	0e1b      	lsrs	r3, r3, #24
 8003d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d4e:	ee17 2a90 	vmov	r2, s15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
}
 8003d6a:	bf00      	nop
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	03d09000 	.word	0x03d09000
 8003d80:	46000000 	.word	0x46000000
 8003d84:	4c742400 	.word	0x4c742400
 8003d88:	4a742400 	.word	0x4a742400
 8003d8c:	4af42400 	.word	0x4af42400

08003d90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d9e:	4b53      	ldr	r3, [pc, #332]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d101      	bne.n	8003dae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e099      	b.n	8003ee2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dae:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4e      	ldr	r2, [pc, #312]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003db4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dba:	f7fd f89b 	bl	8000ef4 <HAL_GetTick>
 8003dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dc2:	f7fd f897 	bl	8000ef4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e086      	b.n	8003ee2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003de0:	4b42      	ldr	r3, [pc, #264]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	031b      	lsls	r3, r3, #12
 8003dee:	493f      	ldr	r1, [pc, #252]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	628b      	str	r3, [r1, #40]	; 0x28
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	025b      	lsls	r3, r3, #9
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e24:	4931      	ldr	r1, [pc, #196]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	492d      	ldr	r1, [pc, #180]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	f023 0220 	bic.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	4928      	ldr	r1, [pc, #160]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e4e:	4b27      	ldr	r3, [pc, #156]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e54:	f023 0310 	bic.w	r3, r3, #16
 8003e58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <RCCEx_PLL2_Config+0x160>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	69d2      	ldr	r2, [r2, #28]
 8003e66:	00d2      	lsls	r2, r2, #3
 8003e68:	4920      	ldr	r1, [pc, #128]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e74:	f043 0310 	orr.w	r3, r3, #16
 8003e78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	4a19      	ldr	r2, [pc, #100]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e8c:	e00f      	b.n	8003eae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e94:	4b15      	ldr	r3, [pc, #84]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ea0:	e005      	b.n	8003eae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eba:	f7fd f81b 	bl	8000ef4 <HAL_GetTick>
 8003ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ec0:	e008      	b.n	8003ed4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ec2:	f7fd f817 	bl	8000ef4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <RCCEx_PLL2_Config+0x15c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	ffff0007 	.word	0xffff0007

08003ef4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f02:	4b53      	ldr	r3, [pc, #332]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d101      	bne.n	8003f12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e099      	b.n	8004046 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f12:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1e:	f7fc ffe9 	bl	8000ef4 <HAL_GetTick>
 8003f22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f26:	f7fc ffe5 	bl	8000ef4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e086      	b.n	8004046 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f38:	4b45      	ldr	r3, [pc, #276]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	051b      	lsls	r3, r3, #20
 8003f52:	493f      	ldr	r1, [pc, #252]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	628b      	str	r3, [r1, #40]	; 0x28
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	025b      	lsls	r3, r3, #9
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f88:	4931      	ldr	r1, [pc, #196]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	492d      	ldr	r1, [pc, #180]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	4928      	ldr	r1, [pc, #160]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a26      	ldr	r2, [pc, #152]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <RCCEx_PLL3_Config+0x160>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	69d2      	ldr	r2, [r2, #28]
 8003fca:	00d2      	lsls	r2, r2, #3
 8003fcc:	4920      	ldr	r1, [pc, #128]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ff0:	e00f      	b.n	8004012 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004004:	e005      	b.n	8004012 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4a11      	ldr	r2, [pc, #68]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 800400c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004010:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401e:	f7fc ff69 	bl	8000ef4 <HAL_GetTick>
 8004022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004024:	e008      	b.n	8004038 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004026:	f7fc ff65 	bl	8000ef4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e006      	b.n	8004046 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <RCCEx_PLL3_Config+0x15c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
 8004054:	ffff0007 	.word	0xffff0007

08004058 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e08f      	b.n	800418c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc fd31 	bl	8000ae8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <HAL_TIM_Encoder_Init+0x13c>)
 800409a:	400b      	ands	r3, r1
 800409c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f000 f909 	bl	80042c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_TIM_Encoder_Init+0x140>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	4313      	orrs	r3, r2
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_TIM_Encoder_Init+0x144>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_TIM_Encoder_Init+0x148>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	4313      	orrs	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	011a      	lsls	r2, r3, #4
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	031b      	lsls	r3, r3, #12
 8004118:	4313      	orrs	r3, r2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4313      	orrs	r3, r2
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fffebff8 	.word	0xfffebff8
 8004198:	fffffcfc 	.word	0xfffffcfc
 800419c:	fffff3f3 	.word	0xfffff3f3
 80041a0:	ffff0f0f 	.word	0xffff0f0f

080041a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d110      	bne.n	80041f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041da:	7b7b      	ldrb	r3, [r7, #13]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d001      	beq.n	80041e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e069      	b.n	80042b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	e031      	b.n	800425a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d110      	bne.n	800421e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041fc:	7bbb      	ldrb	r3, [r7, #14]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004202:	7b3b      	ldrb	r3, [r7, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d001      	beq.n	800420c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e055      	b.n	80042b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421c:	e01d      	b.n	800425a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d108      	bne.n	8004236 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800422a:	7b7b      	ldrb	r3, [r7, #13]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d102      	bne.n	8004236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004230:	7b3b      	ldrb	r3, [r7, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d001      	beq.n	800423a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e03e      	b.n	80042b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_TIM_Encoder_Start+0xc4>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b04      	cmp	r3, #4
 8004264:	d008      	beq.n	8004278 <HAL_TIM_Encoder_Start+0xd4>
 8004266:	e00f      	b.n	8004288 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2201      	movs	r2, #1
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f8bf 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8004276:	e016      	b.n	80042a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	2104      	movs	r1, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f8b7 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8004286:	e00e      	b.n	80042a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2201      	movs	r2, #1
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f8af 	bl	80043f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	2104      	movs	r1, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f8a8 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 80042a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3d      	ldr	r2, [pc, #244]	; (80043d8 <TIM_Base_SetConfig+0x118>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <TIM_Base_SetConfig+0x11c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <TIM_Base_SetConfig+0x120>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2f      	ldr	r2, [pc, #188]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01f      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d01b      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <TIM_Base_SetConfig+0x118>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d017      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <TIM_Base_SetConfig+0x11c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <TIM_Base_SetConfig+0x120>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00f      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <TIM_Base_SetConfig+0x128>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <TIM_Base_SetConfig+0x12c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0x9a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <TIM_Base_SetConfig+0x130>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d108      	bne.n	800436c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00f      	beq.n	80043b8 <TIM_Base_SetConfig+0xf8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00b      	beq.n	80043b8 <TIM_Base_SetConfig+0xf8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <TIM_Base_SetConfig+0x128>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0xf8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a10      	ldr	r2, [pc, #64]	; (80043ec <TIM_Base_SetConfig+0x12c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0xf8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <TIM_Base_SetConfig+0x130>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	615a      	str	r2, [r3, #20]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800

080043f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	43db      	mvns	r3, r3
 8004416:	401a      	ands	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e06d      	b.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a30      	ldr	r2, [pc, #192]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2f      	ldr	r2, [pc, #188]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a20      	ldr	r2, [pc, #128]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d022      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d01d      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d018      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10c      	bne.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40001800 	.word	0x40001800
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e042      	b.n	80045f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fafb 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f82c 	bl	80045fc <UART_SetConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fe8c 	bl	80052d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 ff13 	bl	8005418 <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004600:	b092      	sub	sp, #72	; 0x48
 8004602:	af00      	add	r7, sp, #0
 8004604:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	431a      	orrs	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4313      	orrs	r3, r2
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4bbe      	ldr	r3, [pc, #760]	; (8004924 <UART_SetConfig+0x328>)
 800462c:	4013      	ands	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004634:	430b      	orrs	r3, r1
 8004636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4ab3      	ldr	r2, [pc, #716]	; (8004928 <UART_SetConfig+0x32c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004664:	4313      	orrs	r3, r2
 8004666:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	4baf      	ldr	r3, [pc, #700]	; (800492c <UART_SetConfig+0x330>)
 8004670:	4013      	ands	r3, r2
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004678:	430b      	orrs	r3, r1
 800467a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f023 010f 	bic.w	r1, r3, #15
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4aa6      	ldr	r2, [pc, #664]	; (8004930 <UART_SetConfig+0x334>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d177      	bne.n	800478c <UART_SetConfig+0x190>
 800469c:	4ba5      	ldr	r3, [pc, #660]	; (8004934 <UART_SetConfig+0x338>)
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046a4:	2b28      	cmp	r3, #40	; 0x28
 80046a6:	d86d      	bhi.n	8004784 <UART_SetConfig+0x188>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0xb4>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	08004755 	.word	0x08004755
 80046b4:	08004785 	.word	0x08004785
 80046b8:	08004785 	.word	0x08004785
 80046bc:	08004785 	.word	0x08004785
 80046c0:	08004785 	.word	0x08004785
 80046c4:	08004785 	.word	0x08004785
 80046c8:	08004785 	.word	0x08004785
 80046cc:	08004785 	.word	0x08004785
 80046d0:	0800475d 	.word	0x0800475d
 80046d4:	08004785 	.word	0x08004785
 80046d8:	08004785 	.word	0x08004785
 80046dc:	08004785 	.word	0x08004785
 80046e0:	08004785 	.word	0x08004785
 80046e4:	08004785 	.word	0x08004785
 80046e8:	08004785 	.word	0x08004785
 80046ec:	08004785 	.word	0x08004785
 80046f0:	08004765 	.word	0x08004765
 80046f4:	08004785 	.word	0x08004785
 80046f8:	08004785 	.word	0x08004785
 80046fc:	08004785 	.word	0x08004785
 8004700:	08004785 	.word	0x08004785
 8004704:	08004785 	.word	0x08004785
 8004708:	08004785 	.word	0x08004785
 800470c:	08004785 	.word	0x08004785
 8004710:	0800476d 	.word	0x0800476d
 8004714:	08004785 	.word	0x08004785
 8004718:	08004785 	.word	0x08004785
 800471c:	08004785 	.word	0x08004785
 8004720:	08004785 	.word	0x08004785
 8004724:	08004785 	.word	0x08004785
 8004728:	08004785 	.word	0x08004785
 800472c:	08004785 	.word	0x08004785
 8004730:	08004775 	.word	0x08004775
 8004734:	08004785 	.word	0x08004785
 8004738:	08004785 	.word	0x08004785
 800473c:	08004785 	.word	0x08004785
 8004740:	08004785 	.word	0x08004785
 8004744:	08004785 	.word	0x08004785
 8004748:	08004785 	.word	0x08004785
 800474c:	08004785 	.word	0x08004785
 8004750:	0800477d 	.word	0x0800477d
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e326      	b.n	8004daa <UART_SetConfig+0x7ae>
 800475c:	2304      	movs	r3, #4
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e322      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004764:	2308      	movs	r3, #8
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e31e      	b.n	8004daa <UART_SetConfig+0x7ae>
 800476c:	2310      	movs	r3, #16
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e31a      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004774:	2320      	movs	r3, #32
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477a:	e316      	b.n	8004daa <UART_SetConfig+0x7ae>
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e312      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e30e      	b.n	8004daa <UART_SetConfig+0x7ae>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a69      	ldr	r2, [pc, #420]	; (8004938 <UART_SetConfig+0x33c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d130      	bne.n	80047f8 <UART_SetConfig+0x1fc>
 8004796:	4b67      	ldr	r3, [pc, #412]	; (8004934 <UART_SetConfig+0x338>)
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d826      	bhi.n	80047f0 <UART_SetConfig+0x1f4>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x1ac>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047c1 	.word	0x080047c1
 80047ac:	080047c9 	.word	0x080047c9
 80047b0:	080047d1 	.word	0x080047d1
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e2f0      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e2ec      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e2e8      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e2e4      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047e0:	2320      	movs	r3, #32
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e2e0      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047e8:	2340      	movs	r3, #64	; 0x40
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e2dc      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e2d8      	b.n	8004daa <UART_SetConfig+0x7ae>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a4f      	ldr	r2, [pc, #316]	; (800493c <UART_SetConfig+0x340>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d130      	bne.n	8004864 <UART_SetConfig+0x268>
 8004802:	4b4c      	ldr	r3, [pc, #304]	; (8004934 <UART_SetConfig+0x338>)
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	2b05      	cmp	r3, #5
 800480c:	d826      	bhi.n	800485c <UART_SetConfig+0x260>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0x218>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	0800482d 	.word	0x0800482d
 8004818:	08004835 	.word	0x08004835
 800481c:	0800483d 	.word	0x0800483d
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e2ba      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e2b6      	b.n	8004daa <UART_SetConfig+0x7ae>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e2b2      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e2ae      	b.n	8004daa <UART_SetConfig+0x7ae>
 800484c:	2320      	movs	r3, #32
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004852:	e2aa      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004854:	2340      	movs	r3, #64	; 0x40
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485a:	e2a6      	b.n	8004daa <UART_SetConfig+0x7ae>
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004862:	e2a2      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a35      	ldr	r2, [pc, #212]	; (8004940 <UART_SetConfig+0x344>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d130      	bne.n	80048d0 <UART_SetConfig+0x2d4>
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <UART_SetConfig+0x338>)
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b05      	cmp	r3, #5
 8004878:	d826      	bhi.n	80048c8 <UART_SetConfig+0x2cc>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <UART_SetConfig+0x284>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004899 	.word	0x08004899
 8004884:	080048a1 	.word	0x080048a1
 8004888:	080048a9 	.word	0x080048a9
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e284      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048a0:	2304      	movs	r3, #4
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e280      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048a8:	2308      	movs	r3, #8
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e27c      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048b0:	2310      	movs	r3, #16
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b6:	e278      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048b8:	2320      	movs	r3, #32
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048be:	e274      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048c0:	2340      	movs	r3, #64	; 0x40
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048c6:	e270      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ce:	e26c      	b.n	8004daa <UART_SetConfig+0x7ae>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <UART_SetConfig+0x348>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d142      	bne.n	8004960 <UART_SetConfig+0x364>
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <UART_SetConfig+0x338>)
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d838      	bhi.n	8004958 <UART_SetConfig+0x35c>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x2f0>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004905 	.word	0x08004905
 80048f0:	0800490d 	.word	0x0800490d
 80048f4:	08004915 	.word	0x08004915
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004949 	.word	0x08004949
 8004900:	08004951 	.word	0x08004951
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490a:	e24e      	b.n	8004daa <UART_SetConfig+0x7ae>
 800490c:	2304      	movs	r3, #4
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004912:	e24a      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004914:	2308      	movs	r3, #8
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491a:	e246      	b.n	8004daa <UART_SetConfig+0x7ae>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004922:	e242      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004924:	cfff69f3 	.word	0xcfff69f3
 8004928:	58000c00 	.word	0x58000c00
 800492c:	11fff4ff 	.word	0x11fff4ff
 8004930:	40011000 	.word	0x40011000
 8004934:	58024400 	.word	0x58024400
 8004938:	40004400 	.word	0x40004400
 800493c:	40004800 	.word	0x40004800
 8004940:	40004c00 	.word	0x40004c00
 8004944:	40005000 	.word	0x40005000
 8004948:	2320      	movs	r3, #32
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494e:	e22c      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004950:	2340      	movs	r3, #64	; 0x40
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004956:	e228      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495e:	e224      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4ab1      	ldr	r2, [pc, #708]	; (8004c2c <UART_SetConfig+0x630>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d176      	bne.n	8004a58 <UART_SetConfig+0x45c>
 800496a:	4bb1      	ldr	r3, [pc, #708]	; (8004c30 <UART_SetConfig+0x634>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004972:	2b28      	cmp	r3, #40	; 0x28
 8004974:	d86c      	bhi.n	8004a50 <UART_SetConfig+0x454>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x380>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004a21 	.word	0x08004a21
 8004980:	08004a51 	.word	0x08004a51
 8004984:	08004a51 	.word	0x08004a51
 8004988:	08004a51 	.word	0x08004a51
 800498c:	08004a51 	.word	0x08004a51
 8004990:	08004a51 	.word	0x08004a51
 8004994:	08004a51 	.word	0x08004a51
 8004998:	08004a51 	.word	0x08004a51
 800499c:	08004a29 	.word	0x08004a29
 80049a0:	08004a51 	.word	0x08004a51
 80049a4:	08004a51 	.word	0x08004a51
 80049a8:	08004a51 	.word	0x08004a51
 80049ac:	08004a51 	.word	0x08004a51
 80049b0:	08004a51 	.word	0x08004a51
 80049b4:	08004a51 	.word	0x08004a51
 80049b8:	08004a51 	.word	0x08004a51
 80049bc:	08004a31 	.word	0x08004a31
 80049c0:	08004a51 	.word	0x08004a51
 80049c4:	08004a51 	.word	0x08004a51
 80049c8:	08004a51 	.word	0x08004a51
 80049cc:	08004a51 	.word	0x08004a51
 80049d0:	08004a51 	.word	0x08004a51
 80049d4:	08004a51 	.word	0x08004a51
 80049d8:	08004a51 	.word	0x08004a51
 80049dc:	08004a39 	.word	0x08004a39
 80049e0:	08004a51 	.word	0x08004a51
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004a51 	.word	0x08004a51
 80049ec:	08004a51 	.word	0x08004a51
 80049f0:	08004a51 	.word	0x08004a51
 80049f4:	08004a51 	.word	0x08004a51
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08004a51 	.word	0x08004a51
 8004a08:	08004a51 	.word	0x08004a51
 8004a0c:	08004a51 	.word	0x08004a51
 8004a10:	08004a51 	.word	0x08004a51
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a51 	.word	0x08004a51
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e1c0      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e1bc      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a30:	2308      	movs	r3, #8
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a36:	e1b8      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e1b4      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a40:	2320      	movs	r3, #32
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a46:	e1b0      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a48:	2340      	movs	r3, #64	; 0x40
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4e:	e1ac      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a56:	e1a8      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a75      	ldr	r2, [pc, #468]	; (8004c34 <UART_SetConfig+0x638>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d130      	bne.n	8004ac4 <UART_SetConfig+0x4c8>
 8004a62:	4b73      	ldr	r3, [pc, #460]	; (8004c30 <UART_SetConfig+0x634>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d826      	bhi.n	8004abc <UART_SetConfig+0x4c0>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x478>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a8d 	.word	0x08004a8d
 8004a78:	08004a95 	.word	0x08004a95
 8004a7c:	08004a9d 	.word	0x08004a9d
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004aad 	.word	0x08004aad
 8004a88:	08004ab5 	.word	0x08004ab5
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e18a      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e186      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e182      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e17e      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004aac:	2320      	movs	r3, #32
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab2:	e17a      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aba:	e176      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac2:	e172      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5b      	ldr	r2, [pc, #364]	; (8004c38 <UART_SetConfig+0x63c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d130      	bne.n	8004b30 <UART_SetConfig+0x534>
 8004ace:	4b58      	ldr	r3, [pc, #352]	; (8004c30 <UART_SetConfig+0x634>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d826      	bhi.n	8004b28 <UART_SetConfig+0x52c>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x4e4>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af9 	.word	0x08004af9
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b19 	.word	0x08004b19
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e154      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e150      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0e:	e14c      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b16:	e148      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1e:	e144      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b26:	e140      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2e:	e13c      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a41      	ldr	r2, [pc, #260]	; (8004c3c <UART_SetConfig+0x640>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	f040 8082 	bne.w	8004c40 <UART_SetConfig+0x644>
 8004b3c:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <UART_SetConfig+0x634>)
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b44:	2b28      	cmp	r3, #40	; 0x28
 8004b46:	d86d      	bhi.n	8004c24 <UART_SetConfig+0x628>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x554>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004bf5 	.word	0x08004bf5
 8004b54:	08004c25 	.word	0x08004c25
 8004b58:	08004c25 	.word	0x08004c25
 8004b5c:	08004c25 	.word	0x08004c25
 8004b60:	08004c25 	.word	0x08004c25
 8004b64:	08004c25 	.word	0x08004c25
 8004b68:	08004c25 	.word	0x08004c25
 8004b6c:	08004c25 	.word	0x08004c25
 8004b70:	08004bfd 	.word	0x08004bfd
 8004b74:	08004c25 	.word	0x08004c25
 8004b78:	08004c25 	.word	0x08004c25
 8004b7c:	08004c25 	.word	0x08004c25
 8004b80:	08004c25 	.word	0x08004c25
 8004b84:	08004c25 	.word	0x08004c25
 8004b88:	08004c25 	.word	0x08004c25
 8004b8c:	08004c25 	.word	0x08004c25
 8004b90:	08004c05 	.word	0x08004c05
 8004b94:	08004c25 	.word	0x08004c25
 8004b98:	08004c25 	.word	0x08004c25
 8004b9c:	08004c25 	.word	0x08004c25
 8004ba0:	08004c25 	.word	0x08004c25
 8004ba4:	08004c25 	.word	0x08004c25
 8004ba8:	08004c25 	.word	0x08004c25
 8004bac:	08004c25 	.word	0x08004c25
 8004bb0:	08004c0d 	.word	0x08004c0d
 8004bb4:	08004c25 	.word	0x08004c25
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004c25 	.word	0x08004c25
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004c25 	.word	0x08004c25
 8004bc8:	08004c25 	.word	0x08004c25
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c15 	.word	0x08004c15
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c25 	.word	0x08004c25
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e0d6      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c02:	e0d2      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0a:	e0ce      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c12:	e0ca      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004c14:	2320      	movs	r3, #32
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e0c6      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c22:	e0c2      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2a:	e0be      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	58024400 	.word	0x58024400
 8004c34:	40007800 	.word	0x40007800
 8004c38:	40007c00 	.word	0x40007c00
 8004c3c:	40011800 	.word	0x40011800
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4aad      	ldr	r2, [pc, #692]	; (8004efc <UART_SetConfig+0x900>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d176      	bne.n	8004d38 <UART_SetConfig+0x73c>
 8004c4a:	4bad      	ldr	r3, [pc, #692]	; (8004f00 <UART_SetConfig+0x904>)
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c52:	2b28      	cmp	r3, #40	; 0x28
 8004c54:	d86c      	bhi.n	8004d30 <UART_SetConfig+0x734>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x660>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004d01 	.word	0x08004d01
 8004c60:	08004d31 	.word	0x08004d31
 8004c64:	08004d31 	.word	0x08004d31
 8004c68:	08004d31 	.word	0x08004d31
 8004c6c:	08004d31 	.word	0x08004d31
 8004c70:	08004d31 	.word	0x08004d31
 8004c74:	08004d31 	.word	0x08004d31
 8004c78:	08004d31 	.word	0x08004d31
 8004c7c:	08004d09 	.word	0x08004d09
 8004c80:	08004d31 	.word	0x08004d31
 8004c84:	08004d31 	.word	0x08004d31
 8004c88:	08004d31 	.word	0x08004d31
 8004c8c:	08004d31 	.word	0x08004d31
 8004c90:	08004d31 	.word	0x08004d31
 8004c94:	08004d31 	.word	0x08004d31
 8004c98:	08004d31 	.word	0x08004d31
 8004c9c:	08004d11 	.word	0x08004d11
 8004ca0:	08004d31 	.word	0x08004d31
 8004ca4:	08004d31 	.word	0x08004d31
 8004ca8:	08004d31 	.word	0x08004d31
 8004cac:	08004d31 	.word	0x08004d31
 8004cb0:	08004d31 	.word	0x08004d31
 8004cb4:	08004d31 	.word	0x08004d31
 8004cb8:	08004d31 	.word	0x08004d31
 8004cbc:	08004d19 	.word	0x08004d19
 8004cc0:	08004d31 	.word	0x08004d31
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004d31 	.word	0x08004d31
 8004cd4:	08004d31 	.word	0x08004d31
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d21 	.word	0x08004d21
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004d31 	.word	0x08004d31
 8004ce8:	08004d31 	.word	0x08004d31
 8004cec:	08004d31 	.word	0x08004d31
 8004cf0:	08004d31 	.word	0x08004d31
 8004cf4:	08004d31 	.word	0x08004d31
 8004cf8:	08004d31 	.word	0x08004d31
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e050      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e04c      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e048      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e044      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d20:	2320      	movs	r3, #32
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d26:	e040      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d28:	2340      	movs	r3, #64	; 0x40
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2e:	e03c      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d36:	e038      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a71      	ldr	r2, [pc, #452]	; (8004f04 <UART_SetConfig+0x908>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d130      	bne.n	8004da4 <UART_SetConfig+0x7a8>
 8004d42:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <UART_SetConfig+0x904>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d826      	bhi.n	8004d9c <UART_SetConfig+0x7a0>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0x758>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d6d 	.word	0x08004d6d
 8004d58:	08004d75 	.word	0x08004d75
 8004d5c:	08004d7d 	.word	0x08004d7d
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e01a      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e016      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d82:	e012      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8a:	e00e      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d92:	e00a      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9a:	e006      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da2:	e002      	b.n	8004daa <UART_SetConfig+0x7ae>
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a55      	ldr	r2, [pc, #340]	; (8004f04 <UART_SetConfig+0x908>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	f040 80f8 	bne.w	8004fa6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004db6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	dc46      	bgt.n	8004e4c <UART_SetConfig+0x850>
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	db75      	blt.n	8004eae <UART_SetConfig+0x8b2>
 8004dc2:	3b02      	subs	r3, #2
 8004dc4:	2b1e      	cmp	r3, #30
 8004dc6:	d872      	bhi.n	8004eae <UART_SetConfig+0x8b2>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <UART_SetConfig+0x7d4>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e53 	.word	0x08004e53
 8004dd4:	08004eaf 	.word	0x08004eaf
 8004dd8:	08004e5b 	.word	0x08004e5b
 8004ddc:	08004eaf 	.word	0x08004eaf
 8004de0:	08004eaf 	.word	0x08004eaf
 8004de4:	08004eaf 	.word	0x08004eaf
 8004de8:	08004e6b 	.word	0x08004e6b
 8004dec:	08004eaf 	.word	0x08004eaf
 8004df0:	08004eaf 	.word	0x08004eaf
 8004df4:	08004eaf 	.word	0x08004eaf
 8004df8:	08004eaf 	.word	0x08004eaf
 8004dfc:	08004eaf 	.word	0x08004eaf
 8004e00:	08004eaf 	.word	0x08004eaf
 8004e04:	08004eaf 	.word	0x08004eaf
 8004e08:	08004e7b 	.word	0x08004e7b
 8004e0c:	08004eaf 	.word	0x08004eaf
 8004e10:	08004eaf 	.word	0x08004eaf
 8004e14:	08004eaf 	.word	0x08004eaf
 8004e18:	08004eaf 	.word	0x08004eaf
 8004e1c:	08004eaf 	.word	0x08004eaf
 8004e20:	08004eaf 	.word	0x08004eaf
 8004e24:	08004eaf 	.word	0x08004eaf
 8004e28:	08004eaf 	.word	0x08004eaf
 8004e2c:	08004eaf 	.word	0x08004eaf
 8004e30:	08004eaf 	.word	0x08004eaf
 8004e34:	08004eaf 	.word	0x08004eaf
 8004e38:	08004eaf 	.word	0x08004eaf
 8004e3c:	08004eaf 	.word	0x08004eaf
 8004e40:	08004eaf 	.word	0x08004eaf
 8004e44:	08004eaf 	.word	0x08004eaf
 8004e48:	08004ea1 	.word	0x08004ea1
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d02a      	beq.n	8004ea6 <UART_SetConfig+0x8aa>
 8004e50:	e02d      	b.n	8004eae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e52:	f7fe fcdf 	bl	8003814 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e58:	e02f      	b.n	8004eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fcee 	bl	8003840 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e68:	e027      	b.n	8004eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e6a:	f107 0318 	add.w	r3, r7, #24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fe3a 	bl	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e78:	e01f      	b.n	8004eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <UART_SetConfig+0x904>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <UART_SetConfig+0x904>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <UART_SetConfig+0x90c>)
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e98:	e00f      	b.n	8004eba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <UART_SetConfig+0x90c>)
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e9e:	e00c      	b.n	8004eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <UART_SetConfig+0x910>)
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ea4:	e009      	b.n	8004eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eac:	e005      	b.n	8004eba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 81ee 	beq.w	800529e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <UART_SetConfig+0x914>)
 8004ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d305      	bcc.n	8004ef2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d910      	bls.n	8004f14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ef8:	e1d1      	b.n	800529e <UART_SetConfig+0xca2>
 8004efa:	bf00      	nop
 8004efc:	40011c00 	.word	0x40011c00
 8004f00:	58024400 	.word	0x58024400
 8004f04:	58000c00 	.word	0x58000c00
 8004f08:	03d09000 	.word	0x03d09000
 8004f0c:	003d0900 	.word	0x003d0900
 8004f10:	08005990 	.word	0x08005990
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	2200      	movs	r2, #0
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	60fa      	str	r2, [r7, #12]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	4ac0      	ldr	r2, [pc, #768]	; (8005224 <UART_SetConfig+0xc28>)
 8004f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2200      	movs	r2, #0
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f36:	f7fb f9d9 	bl	80002ec <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	020b      	lsls	r3, r1, #8
 8004f4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f50:	0202      	lsls	r2, r0, #8
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	6849      	ldr	r1, [r1, #4]
 8004f56:	0849      	lsrs	r1, r1, #1
 8004f58:	2000      	movs	r0, #0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	eb12 0804 	adds.w	r8, r2, r4
 8004f62:	eb43 0905 	adc.w	r9, r3, r5
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	469a      	mov	sl, r3
 8004f6e:	4693      	mov	fp, r2
 8004f70:	4652      	mov	r2, sl
 8004f72:	465b      	mov	r3, fp
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	f7fb f9b8 	bl	80002ec <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8a:	d308      	bcc.n	8004f9e <UART_SetConfig+0x9a2>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f92:	d204      	bcs.n	8004f9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	e17f      	b.n	800529e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004fa4:	e17b      	b.n	800529e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fae:	f040 80bd 	bne.w	800512c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	dc48      	bgt.n	800504c <UART_SetConfig+0xa50>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db7b      	blt.n	80050b6 <UART_SetConfig+0xaba>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d879      	bhi.n	80050b6 <UART_SetConfig+0xaba>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x9cc>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08005053 	.word	0x08005053
 8004fcc:	0800505b 	.word	0x0800505b
 8004fd0:	080050b7 	.word	0x080050b7
 8004fd4:	080050b7 	.word	0x080050b7
 8004fd8:	08005063 	.word	0x08005063
 8004fdc:	080050b7 	.word	0x080050b7
 8004fe0:	080050b7 	.word	0x080050b7
 8004fe4:	080050b7 	.word	0x080050b7
 8004fe8:	08005073 	.word	0x08005073
 8004fec:	080050b7 	.word	0x080050b7
 8004ff0:	080050b7 	.word	0x080050b7
 8004ff4:	080050b7 	.word	0x080050b7
 8004ff8:	080050b7 	.word	0x080050b7
 8004ffc:	080050b7 	.word	0x080050b7
 8005000:	080050b7 	.word	0x080050b7
 8005004:	080050b7 	.word	0x080050b7
 8005008:	08005083 	.word	0x08005083
 800500c:	080050b7 	.word	0x080050b7
 8005010:	080050b7 	.word	0x080050b7
 8005014:	080050b7 	.word	0x080050b7
 8005018:	080050b7 	.word	0x080050b7
 800501c:	080050b7 	.word	0x080050b7
 8005020:	080050b7 	.word	0x080050b7
 8005024:	080050b7 	.word	0x080050b7
 8005028:	080050b7 	.word	0x080050b7
 800502c:	080050b7 	.word	0x080050b7
 8005030:	080050b7 	.word	0x080050b7
 8005034:	080050b7 	.word	0x080050b7
 8005038:	080050b7 	.word	0x080050b7
 800503c:	080050b7 	.word	0x080050b7
 8005040:	080050b7 	.word	0x080050b7
 8005044:	080050b7 	.word	0x080050b7
 8005048:	080050a9 	.word	0x080050a9
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d02e      	beq.n	80050ae <UART_SetConfig+0xab2>
 8005050:	e031      	b.n	80050b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7fd f9f5 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8005056:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005058:	e033      	b.n	80050c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505a:	f7fd fa07 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 800505e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005060:	e02f      	b.n	80050c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fbea 	bl	8003840 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005070:	e027      	b.n	80050c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fd36 	bl	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005080:	e01f      	b.n	80050c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005082:	4b69      	ldr	r3, [pc, #420]	; (8005228 <UART_SetConfig+0xc2c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800508e:	4b66      	ldr	r3, [pc, #408]	; (8005228 <UART_SetConfig+0xc2c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	4a64      	ldr	r2, [pc, #400]	; (800522c <UART_SetConfig+0xc30>)
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050a0:	e00f      	b.n	80050c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80050a2:	4b62      	ldr	r3, [pc, #392]	; (800522c <UART_SetConfig+0xc30>)
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a6:	e00c      	b.n	80050c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050a8:	4b61      	ldr	r3, [pc, #388]	; (8005230 <UART_SetConfig+0xc34>)
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ac:	e009      	b.n	80050c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050b4:	e005      	b.n	80050c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80050c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80ea 	beq.w	800529e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	4a55      	ldr	r2, [pc, #340]	; (8005224 <UART_SetConfig+0xc28>)
 80050d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050dc:	005a      	lsls	r2, r3, #1
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	441a      	add	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	2b0f      	cmp	r3, #15
 80050f4:	d916      	bls.n	8005124 <UART_SetConfig+0xb28>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d212      	bcs.n	8005124 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	b29b      	uxth	r3, r3
 8005102:	f023 030f 	bic.w	r3, r3, #15
 8005106:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	b29a      	uxth	r2, r3
 8005114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005116:	4313      	orrs	r3, r2
 8005118:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	e0bc      	b.n	800529e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800512a:	e0b8      	b.n	800529e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800512c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005130:	2b20      	cmp	r3, #32
 8005132:	dc4b      	bgt.n	80051cc <UART_SetConfig+0xbd0>
 8005134:	2b00      	cmp	r3, #0
 8005136:	f2c0 8087 	blt.w	8005248 <UART_SetConfig+0xc4c>
 800513a:	2b20      	cmp	r3, #32
 800513c:	f200 8084 	bhi.w	8005248 <UART_SetConfig+0xc4c>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0xb4c>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	080051d3 	.word	0x080051d3
 800514c:	080051db 	.word	0x080051db
 8005150:	08005249 	.word	0x08005249
 8005154:	08005249 	.word	0x08005249
 8005158:	080051e3 	.word	0x080051e3
 800515c:	08005249 	.word	0x08005249
 8005160:	08005249 	.word	0x08005249
 8005164:	08005249 	.word	0x08005249
 8005168:	080051f3 	.word	0x080051f3
 800516c:	08005249 	.word	0x08005249
 8005170:	08005249 	.word	0x08005249
 8005174:	08005249 	.word	0x08005249
 8005178:	08005249 	.word	0x08005249
 800517c:	08005249 	.word	0x08005249
 8005180:	08005249 	.word	0x08005249
 8005184:	08005249 	.word	0x08005249
 8005188:	08005203 	.word	0x08005203
 800518c:	08005249 	.word	0x08005249
 8005190:	08005249 	.word	0x08005249
 8005194:	08005249 	.word	0x08005249
 8005198:	08005249 	.word	0x08005249
 800519c:	08005249 	.word	0x08005249
 80051a0:	08005249 	.word	0x08005249
 80051a4:	08005249 	.word	0x08005249
 80051a8:	08005249 	.word	0x08005249
 80051ac:	08005249 	.word	0x08005249
 80051b0:	08005249 	.word	0x08005249
 80051b4:	08005249 	.word	0x08005249
 80051b8:	08005249 	.word	0x08005249
 80051bc:	08005249 	.word	0x08005249
 80051c0:	08005249 	.word	0x08005249
 80051c4:	08005249 	.word	0x08005249
 80051c8:	0800523b 	.word	0x0800523b
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d037      	beq.n	8005240 <UART_SetConfig+0xc44>
 80051d0:	e03a      	b.n	8005248 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d2:	f7fd f935 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 80051d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051d8:	e03c      	b.n	8005254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051da:	f7fd f947 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 80051de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051e0:	e038      	b.n	8005254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe fb2a 	bl	8003840 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051f0:	e030      	b.n	8005254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051f2:	f107 0318 	add.w	r3, r7, #24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fc76 	bl	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005200:	e028      	b.n	8005254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <UART_SetConfig+0xc2c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <UART_SetConfig+0xc2c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	08db      	lsrs	r3, r3, #3
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	4a04      	ldr	r2, [pc, #16]	; (800522c <UART_SetConfig+0xc30>)
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005220:	e018      	b.n	8005254 <UART_SetConfig+0xc58>
 8005222:	bf00      	nop
 8005224:	08005990 	.word	0x08005990
 8005228:	58024400 	.word	0x58024400
 800522c:	03d09000 	.word	0x03d09000
 8005230:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <UART_SetConfig+0xccc>)
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005238:	e00c      	b.n	8005254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <UART_SetConfig+0xcd0>)
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800523e:	e009      	b.n	8005254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005246:	e005      	b.n	8005254 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005252:	bf00      	nop
    }

    if (pclk != 0U)
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d021      	beq.n	800529e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <UART_SetConfig+0xcd4>)
 8005260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005264:	461a      	mov	r2, r3
 8005266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005268:	fbb3 f2f2 	udiv	r2, r3, r2
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	441a      	add	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	2b0f      	cmp	r3, #15
 8005282:	d909      	bls.n	8005298 <UART_SetConfig+0xc9c>
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528a:	d205      	bcs.n	8005298 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	b29a      	uxth	r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	e002      	b.n	800529e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80052ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3748      	adds	r7, #72	; 0x48
 80052c2:	46bd      	mov	sp, r7
 80052c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c8:	03d09000 	.word	0x03d09000
 80052cc:	003d0900 	.word	0x003d0900
 80052d0:	08005990 	.word	0x08005990

080052d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01a      	beq.n	80053ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d2:	d10a      	bne.n	80053ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b098      	sub	sp, #96	; 0x60
 800541c:	af02      	add	r7, sp, #8
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005428:	f7fb fd64 	bl	8000ef4 <HAL_GetTick>
 800542c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b08      	cmp	r3, #8
 800543a:	d12f      	bne.n	800549c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f88e 	bl	800556c <UART_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d022      	beq.n	800549c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	653b      	str	r3, [r7, #80]	; 0x50
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005474:	647b      	str	r3, [r7, #68]	; 0x44
 8005476:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800547a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e063      	b.n	8005564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d149      	bne.n	800553e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b2:	2200      	movs	r2, #0
 80054b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f857 	bl	800556c <UART_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d03c      	beq.n	800553e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	623b      	str	r3, [r7, #32]
   return(result);
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
 80054e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e6      	bne.n	80054c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	60fb      	str	r3, [r7, #12]
   return(result);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005516:	61fa      	str	r2, [r7, #28]
 8005518:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	69b9      	ldr	r1, [r7, #24]
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	617b      	str	r3, [r7, #20]
   return(result);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e012      	b.n	8005564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3758      	adds	r7, #88	; 0x58
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557c:	e049      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005584:	d045      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	f7fb fcb5 	bl	8000ef4 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <UART_WaitOnFlagUntilTimeout+0x30>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e048      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d031      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d110      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f839 	bl	800563c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2208      	movs	r2, #8
 80055ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e029      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d111      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f81f 	bl	800563c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e00f      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d0a6      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b095      	sub	sp, #84	; 0x54
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005662:	643b      	str	r3, [r7, #64]	; 0x40
 8005664:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	61fb      	str	r3, [r7, #28]
   return(result);
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <UART_EndRxTransfer+0xc8>)
 800568a:	4013      	ands	r3, r2
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800569c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d118      	bne.n	80056e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	647b      	str	r3, [r7, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6979      	ldr	r1, [r7, #20]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	613b      	str	r3, [r7, #16]
   return(result);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056f8:	bf00      	nop
 80056fa:	3754      	adds	r7, #84	; 0x54
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	effffffe 	.word	0xeffffffe

08005708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_UARTEx_DisableFifoMode+0x16>
 800571a:	2302      	movs	r3, #2
 800571c:	e027      	b.n	800576e <HAL_UARTEx_DisableFifoMode+0x66>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2224      	movs	r2, #36	; 0x24
 800572a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800574c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800578e:	2302      	movs	r3, #2
 8005790:	e02d      	b.n	80057ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2224      	movs	r2, #36	; 0x24
 800579e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f850 	bl	8005874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800580a:	2302      	movs	r3, #2
 800580c:	e02d      	b.n	800586a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2224      	movs	r2, #36	; 0x24
 800581a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f812 	bl	8005874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005880:	2b00      	cmp	r3, #0
 8005882:	d108      	bne.n	8005896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005894:	e031      	b.n	80058fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005896:	2310      	movs	r3, #16
 8005898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800589a:	2310      	movs	r3, #16
 800589c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	0e5b      	lsrs	r3, r3, #25
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0f5b      	lsrs	r3, r3, #29
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	7b3a      	ldrb	r2, [r7, #12]
 80058c2:	4911      	ldr	r1, [pc, #68]	; (8005908 <UARTEx_SetNbDataToProcess+0x94>)
 80058c4:	5c8a      	ldrb	r2, [r1, r2]
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ca:	7b3a      	ldrb	r2, [r7, #12]
 80058cc:	490f      	ldr	r1, [pc, #60]	; (800590c <UARTEx_SetNbDataToProcess+0x98>)
 80058ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	7b7a      	ldrb	r2, [r7, #13]
 80058e0:	4909      	ldr	r1, [pc, #36]	; (8005908 <UARTEx_SetNbDataToProcess+0x94>)
 80058e2:	5c8a      	ldrb	r2, [r1, r2]
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058e8:	7b7a      	ldrb	r2, [r7, #13]
 80058ea:	4908      	ldr	r1, [pc, #32]	; (800590c <UARTEx_SetNbDataToProcess+0x98>)
 80058ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	080059a8 	.word	0x080059a8
 800590c:	080059b0 	.word	0x080059b0

08005910 <memset>:
 8005910:	4402      	add	r2, r0
 8005912:	4603      	mov	r3, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4d0d      	ldr	r5, [pc, #52]	; (8005958 <__libc_init_array+0x38>)
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	2600      	movs	r6, #0
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	4d0b      	ldr	r5, [pc, #44]	; (8005960 <__libc_init_array+0x40>)
 8005932:	4c0c      	ldr	r4, [pc, #48]	; (8005964 <__libc_init_array+0x44>)
 8005934:	f000 f818 	bl	8005968 <_init>
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	2600      	movs	r6, #0
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f855 3b04 	ldr.w	r3, [r5], #4
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	080059c0 	.word	0x080059c0
 800595c:	080059c0 	.word	0x080059c0
 8005960:	080059c0 	.word	0x080059c0
 8005964:	080059c4 	.word	0x080059c4

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
